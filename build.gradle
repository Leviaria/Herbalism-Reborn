plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'me.devupdates'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    // maven {
    //     name = "placeholderapi"
    //     url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    // }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "codemc-repo"
        url = "https://repo.codemc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.7-R0.1-SNAPSHOT")
    
    // Database dependencies
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
    compileOnly 'mysql:mysql-connector-java:8.0.33'
    
    // Configuration
    implementation 'org.yaml:snakeyaml:2.2'
    
    // Placeholders (optional dependencies) - REMOVED
    // compileOnly 'me.clip:placeholderapi:2.11.5'
    
    // Hologram support (optional)
    compileOnly 'me.filoghost.holographicdisplays:holographicdisplays-api:3.0.0'
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.7")
    }
    
    build {
        dependsOn jar
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
